{"ast":null,"code":"var _jsxFileName = \"/Users/piotr/Documents/Web Dev/React/live-streaming-video-platform/client/src/components/streams/StreamList.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStreams } from \"../../actions\";\nimport { Link } from \"react-router-dom\";\n\nclass StreamList extends React.Component {\n  componentDidMount() {\n    this.props.fetchStreams();\n  }\n\n  renderAdmin(userId) {\n    if (this.props.currendUserId === userId) {\n      return React.createElement(\"div\", {\n        className: \"right floated content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, \"EDIT\"), React.createElement(\"button\", {\n        className: \"ui button negative\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, \"DELETE\"));\n    }\n  }\n\n  renderCreate() {\n    console.log(this.props.isSignIn);\n\n    if (this.props.isSignIn) {\n      console.log(\"passed\");\n      return React.createElement(\"div\", {\n        style: {\n          textAlign: \"right\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/streams/new\",\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"Create Stream\"));\n    }\n  }\n\n  renderStreamList() {\n    return this.props.streams.map(({\n      title,\n      description,\n      id,\n      userId\n    }) => {\n      return React.createElement(\"div\", {\n        className: \"item\",\n        key: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, this.renderAdmin(userId), React.createElement(\"i\", {\n        className: \"large middle aligned icon camera\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, title), React.createElement(\"div\", {\n        className: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, description)));\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Streams\"), React.createElement(\"div\", {\n      className: \"ui celled list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.renderStreamList()), this.renderCreate());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    streams: Object.values(state.streams),\n    currendUserId: state.auth.userId,\n    isSignIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStreams\n})(StreamList);","map":{"version":3,"sources":["/Users/piotr/Documents/Web Dev/React/live-streaming-video-platform/client/src/components/streams/StreamList.js"],"names":["React","connect","fetchStreams","Link","StreamList","Component","componentDidMount","props","renderAdmin","userId","currendUserId","renderCreate","console","log","isSignIn","textAlign","renderStreamList","streams","map","title","description","id","render","mapStateToProps","state","Object","values","auth","isSignedIn"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStreams } from \"../../actions\";\nimport { Link } from \"react-router-dom\";\n\nclass StreamList extends React.Component {\n  componentDidMount() {\n    this.props.fetchStreams();\n  }\n\n  renderAdmin(userId) {\n    if (this.props.currendUserId === userId) {\n      return (\n        <div className=\"right floated content\">\n          <button className=\"ui button primary\">EDIT</button>\n          <button className=\"ui button negative\">DELETE</button>\n        </div>\n      );\n    }\n  }\n\n  renderCreate() {\n    console.log(this.props.isSignIn);\n\n    if (this.props.isSignIn) {\n      console.log(\"passed\");\n\n      return (\n        <div style={{ textAlign: \"right\" }}>\n          <Link to=\"/streams/new\" className=\"ui button primary\">\n            Create Stream\n          </Link>\n        </div>\n      );\n    }\n  }\n\n  renderStreamList() {\n    return this.props.streams.map(({ title, description, id, userId }) => {\n      return (\n        <div className=\"item\" key={id}>\n          {this.renderAdmin(userId)}\n          <i className=\"large middle aligned icon camera\" />\n          <div className=\"content\">\n            <div className=\"header\">{title}</div>\n            <div className=\"description\">{description}</div>\n          </div>\n        </div>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Streams</h2>\n        <div className=\"ui celled list\">{this.renderStreamList()}</div>\n        {this.renderCreate()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    streams: Object.values(state.streams),\n    currendUserId: state.auth.userId,\n    isSignIn: state.auth.isSignedIn\n  };\n};\nexport default connect(\n  mapStateToProps,\n  { fetchStreams }\n)(StreamList);\n"]},"metadata":{},"sourceType":"module"}