{"ast":null,"code":"var _jsxFileName = \"/Users/piotr/Documents/Web Dev/React/live-streaming-video-platform/client/src/components/streams/StreamForm.js\";\nimport { Field, reduxForm } from \"redux-form\";\nimport React from \"react\";\n\nclass StreamForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = \"field \".concat(meta.touched && meta.error ? \"error\" : \"\");\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({\n        className: \"input\"\n      }, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.onSubmit(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    const red = {\n      color: \"red\"\n    };\n\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        style: red,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, error);\n    }\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: \"streamForm\",\n  validate\n})(StreamForm);","map":{"version":3,"sources":["/Users/piotr/Documents/Web Dev/React/live-streaming-video-platform/client/src/components/streams/StreamForm.js"],"names":["Field","reduxForm","React","StreamForm","Component","renderInput","input","label","meta","className","touched","error","renderError","onSubmit","formValues","props","red","color","render","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,SAASA,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAN,SAAyBD,KAAK,CAACE,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAOvCC,WAPuC,GAOzB,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACxC,YAAMC,SAAS,mBAAYD,IAAI,CAACE,OAAL,IAAgBF,IAAI,CAACG,KAArB,GAA6B,OAA7B,GAAuC,EAAnD,CAAf;AACA,aACE;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADF,EAEE;AAAO,QAAA,SAAS,EAAC;AAAjB,SAA6BD,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAGG,KAAKM,WAAL,CAAiBJ,IAAjB,CAHH,CADF;AAOD,KAhBsC;;AAAA,SAkBvCK,QAlBuC,GAkB5BC,UAAU,IAAI;AACvB,WAAKC,KAAL,CAAWF,QAAX,CAAoBC,UAApB;AACD,KApBsC;AAAA;;AACvCF,EAAAA,WAAW,CAAC;AAAED,IAAAA,KAAF;AAASD,IAAAA;AAAT,GAAD,EAAqB;AAC9B,UAAMM,GAAG,GAAG;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAZ;;AACA,QAAIP,OAAO,IAAIC,KAAf,EAAsB;AACpB,aAAO;AAAK,QAAA,KAAK,EAAEK,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkBL,KAAlB,CAAP;AACD;AACF;;AAeDO,EAAAA,MAAM,GAAG;AACP,WACE;AACE,MAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWI,YAAX,CAAwB,KAAKN,QAA7B,CADZ;AAEE,MAAA,SAAS,EAAC,SAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,SAAS,EAAE,KAAKA,WAFlB;AAGE,MAAA,KAAK,EAAC,mBAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAUE;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF,CADF;AAcD;;AApCsC;;AAuCzC,MAAMe,QAAQ,GAAGN,UAAU,IAAI;AAC7B,QAAMO,MAAM,GAAG,EAAf;;AACA,MAAI,CAACP,UAAU,CAACQ,KAAhB,EAAuB;AACrBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AACD,MAAI,CAACR,UAAU,CAACS,WAAhB,EAA6B;AAC3BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD;;AACD,SAAOF,MAAP;AACD,CATD;;AAWA,eAAepB,SAAS,CAAC;AACvBuB,EAAAA,IAAI,EAAE,YADiB;AAEvBJ,EAAAA;AAFuB,CAAD,CAAT,CAGZjB,UAHY,CAAf","sourcesContent":["import { Field, reduxForm } from \"redux-form\";\nimport React from \"react\";\n\nclass StreamForm extends React.Component {\n  renderError({ error, touched }) {\n    const red = { color: \"red\" };\n    if (touched && error) {\n      return <div style={red}>{error}</div>;\n    }\n  }\n  renderInput = ({ input, label, meta }) => {\n    const className = `field ${meta.touched && meta.error ? \"error\" : \"\"}`;\n    return (\n      <div className={className}>\n        <label>{label}</label>\n        <input className=\"input\" {...input} />\n        {this.renderError(meta)}\n      </div>\n    );\n  };\n\n  onSubmit = formValues => {\n    this.props.onSubmit(formValues);\n  };\n  render() {\n    return (\n      <form\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n        className=\"ui form\"\n      >\n        <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\n        <Field\n          name=\"description\"\n          component={this.renderInput}\n          label=\"Enter Description\"\n        />\n        <button className=\"ui button primary\">Submit</button>\n      </form>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n  return errors;\n};\n\nexport default reduxForm({\n  form: \"streamForm\",\n  validate\n})(StreamForm);\n"]},"metadata":{},"sourceType":"module"}