{"ast":null,"code":"var _jsxFileName = \"/Users/piotr/Documents/Web Dev/React/live-streaming-video-platform/client/src/components/streams/StreamCreate.js\";\nimport { Field, reduxForm } from \"redux-form\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStream } from \"../../actions\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = \"field \".concat(meta.touched && meta.error ? \"error\" : \"\");\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({\n        className: \"input\"\n      }, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    const red = {\n      color: \"red\"\n    };\n\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        style: red,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }, error);\n    }\n  }\n\n  onSubmit({\n    title,\n    description\n  }) {\n    this.props.createStream();\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nconst formWrap = reduxForm({\n  form: \"streamCreate\",\n  validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrap);","map":{"version":3,"sources":["/Users/piotr/Documents/Web Dev/React/live-streaming-video-platform/client/src/components/streams/StreamCreate.js"],"names":["Field","reduxForm","React","connect","createStream","StreamCreate","Component","renderInput","input","label","meta","className","touched","error","renderError","red","color","onSubmit","title","description","props","render","handleSubmit","validate","formValues","errors","formWrap","form"],"mappings":";AAAA,SAASA,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAOzCC,WAPyC,GAO3B,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACxC,YAAMC,SAAS,mBAAYD,IAAI,CAACE,OAAL,IAAgBF,IAAI,CAACG,KAArB,GAA6B,OAA7B,GAAuC,EAAnD,CAAf;AACA,aACE;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADF,EAEE;AAAO,QAAA,SAAS,EAAC;AAAjB,SAA6BD,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAGG,KAAKM,WAAL,CAAiBJ,IAAjB,CAHH,CADF;AAOD,KAhBwC;AAAA;;AACzCI,EAAAA,WAAW,CAAC;AAAED,IAAAA,KAAF;AAASD,IAAAA;AAAT,GAAD,EAAqB;AAC9B,UAAMG,GAAG,GAAG;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAZ;;AACA,QAAIJ,OAAO,IAAIC,KAAf,EAAsB;AACpB,aAAO;AAAK,QAAA,KAAK,EAAEE,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkBF,KAAlB,CAAP;AACD;AACF;;AAYDI,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAyB;AAC/B,SAAKC,KAAL,CAAWhB,YAAX;AACD;;AACDiB,EAAAA,MAAM,GAAG;AACP,WACE;AACE,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKL,QAA7B,CADZ;AAEE,MAAA,SAAS,EAAC,SAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKV,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,SAAS,EAAE,KAAKA,WAFlB;AAGE,MAAA,KAAK,EAAC,mBAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAUE;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF,CADF;AAcD;;AApCwC;;AAuC3C,MAAMgB,QAAQ,GAAGC,UAAU,IAAI;AAC7B,QAAMC,MAAM,GAAG,EAAf;;AACA,MAAI,CAACD,UAAU,CAACN,KAAhB,EAAuB;AACrBO,IAAAA,MAAM,CAACP,KAAP,GAAe,wBAAf;AACD;;AACD,MAAI,CAACM,UAAU,CAACL,WAAhB,EAA6B;AAC3BM,IAAAA,MAAM,CAACN,WAAP,GAAqB,8BAArB;AACD;;AACD,SAAOM,MAAP;AACD,CATD;;AAWA,MAAMC,QAAQ,GAAGzB,SAAS,CAAC;AACzB0B,EAAAA,IAAI,EAAE,cADmB;AAEzBJ,EAAAA;AAFyB,CAAD,CAAT,CAGdlB,YAHc,CAAjB;AAKA,eAAeF,OAAO,CACpB,IADoB,EAEpB;AAAEC,EAAAA;AAAF,CAFoB,CAAP,CAGbsB,QAHa,CAAf","sourcesContent":["import { Field, reduxForm } from \"redux-form\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStream } from \"../../actions\";\n\nclass StreamCreate extends React.Component {\n  renderError({ error, touched }) {\n    const red = { color: \"red\" };\n    if (touched && error) {\n      return <div style={red}>{error}</div>;\n    }\n  }\n  renderInput = ({ input, label, meta }) => {\n    const className = `field ${meta.touched && meta.error ? \"error\" : \"\"}`;\n    return (\n      <div className={className}>\n        <label>{label}</label>\n        <input className=\"input\" {...input} />\n        {this.renderError(meta)}\n      </div>\n    );\n  };\n\n  onSubmit({ title, description }) {\n    this.props.createStream();\n  }\n  render() {\n    return (\n      <form\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n        className=\"ui form\"\n      >\n        <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\n        <Field\n          name=\"description\"\n          component={this.renderInput}\n          label=\"Enter Description\"\n        />\n        <button className=\"ui button primary\">Submit</button>\n      </form>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n  return errors;\n};\n\nconst formWrap = reduxForm({\n  form: \"streamCreate\",\n  validate\n})(StreamCreate);\n\nexport default connect(\n  null,\n  { createStream }\n)(formWrap);\n"]},"metadata":{},"sourceType":"module"}